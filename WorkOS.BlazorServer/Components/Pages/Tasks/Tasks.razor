@rendermode InteractiveServer
@page "/Tasks"
@inject TaskService TaskService

<PageTitle>Tasks</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-5">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex mb-5 align-content-center">
        <MudText > Task Search: </MudText>
        <MudTextField T="string" @bind-value="SearchString" Placeholder="Search"></MudTextField>
    </MudContainer>
    
    <CascadingValue Value="Loading">
        <CascadingValue Value="SearchString">
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-block">
                <TaskTable TableColor="@("#c83fd6")" OpenDrawer="OpenTaskDrawer" Title="Plan" TaskList="TasksPlan" />
                <TaskTable TableColor="@("#5ce3ea")" OpenDrawer="OpenTaskDrawer" Title="Started" TaskList="TasksStarted" />
                <TaskTable TableColor="@("#94fc22")" OpenDrawer="OpenTaskDrawer" Title="Completed" TaskList="TasksCompleted" />
            </MudContainer>
        </CascadingValue>
    </CascadingValue>
    <TaskDrawer IsDrawerOpen="IsDrawerOpen" DrawerTask="DrawerTask" />
</MudContainer>


@code {
    public string SearchString = string.Empty;
    private List<TaskItemResponseDTO> TaskList = new();
    public List<TaskItemResponseDTO> TasksPlan = new();
    public List<TaskItemResponseDTO> TasksStarted = new();
    public List<TaskItemResponseDTO> TasksCompleted = new();
    public bool Loading = false;

    public bool IsDrawerOpen { get; set; } = false;
    public TaskItemResponseDTO DrawerTask { get; set; }

    private void OpenTaskDrawer(TaskItemResponseDTO task)
    {
        IsDrawerOpen = true;
        DrawerTask = task;
    }

    protected override async Task OnInitializedAsync()
    {
        throw new FileNotFoundException();

        Loading = true;

        TaskList = await TaskService.GetTasksAsync();
        ModelTables(TaskList);

        Loading = false;

        var httpClientHandler = new HttpClientHandler();
        httpClientHandler.SslProtocols = System.Security.Authentication.SslProtocols.Tls12;
        //httpClientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true;

        var connection = new HubConnectionBuilder().WithUrl("https://localhost:7237/TaskHub", options =>
        {
            options.HttpMessageHandlerFactory = _ => httpClientHandler;
        }).Build();

        connection.On<TaskItemResponseDTO>("UpdateTaskItem", updatedData =>
        {
            var task = TaskList.First(t => t.Id == updatedData.Id);
            task.AuthorId = updatedData.AuthorId;
            task.Title = updatedData.Title;
            task.Description = updatedData.Description;
            task.Status = updatedData.Status;
            task.Priority = updatedData.Priority;

            InvokeAsync(() =>
            {
                ModelTables(TaskList);
                StateHasChanged();
            });
        });
        await connection.StartAsync();
    }

    private void ModelTables(List<TaskItemResponseDTO> taskList)
    {
        TasksPlan = taskList.Where(t => t.Status == StatusCode.Plan).Select(t => t).ToList();
        TasksStarted = taskList.Where(t => t.Status == StatusCode.Started).Select(t => t).ToList();
        TasksCompleted = taskList.Where(t => t.Status == StatusCode.Completed).Select(t => t).ToList();
    }
}
